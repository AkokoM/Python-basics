# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

'''
def fibonacci(n, m):
    a, b = 1, 1
    arr = []
    while 1:
        a, b = b, a + b
        if a > n:
            arr.append(a)
        if a >= m:
            break
    return arr

print(fibonacci(1, 100))
'''

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()

'''
def li(list_1): # Определение функции с помощью инструкции def.
    n = 1
    while n < len(list_1):
        for i in range(len(list_1)-n):
            if list_1[i] > list_1[i+1]:
                list_1[i], list_1[i+1] = list_1[i+1], list_1[i]
        n += 1
    return list_1   # Инструкция return говорит, что нужно вернуть значение. 
    # Функция может и не заканчиваться инструкцией return, при этом функция вернет значение None:


a = li([0, 222, 111, 555, 777, 444, 888, 333, 666, 999])
print(a)
'''

#Задача-3:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.

'''
from math import sqrt

print('Введите координаты точек: \n'
      'А1(х1, у1), А2(х2, у2), А3(x3, у3), А4(x4, у4)')

x = [int(input('x{} = '.format(x))) for x in range(1, 5)]
y = [int(input('y{} = '.format(y))) for y in range(1, 5)]

sides = []
for i in range(0, 4):
    if i == 3:
        side = [x[0] - x[i], y[0] - y[i]]
    else:
        side = [x[i + 1] - x[i], y[i + 1] - y[i]]
    sides.append(sqrt(side[0] ** 2 + side[1] ** 2))
print(sides)
if sides[0] == sides[2] and sides[1] == sides[3]:
    print('Точки являются вершинами параллелограмма')
else:
    print('Точки не являются вершинами параллелограмма')
'''